(*tree.Dialogue)({
  Nodes: ([]tree.Node) (len=2) {
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=5) "Start"
      },
      Statements: ([]*tree.Statement) (len=4) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          LineGroupStatement: (*tree.LineGroupStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)(<nil>),
          CallStatement: (*tree.CallStatement)(<nil>),
          DeclareStatement: (*tree.DeclareStatement)({
            VariableID: (string) (len=12) "knows_player",
            Value: (*variable.Expression)({
              Value: (*variable.Value)({
                Number: (*float64)(<nil>),
                Boolean: (*bool)(false),
                String: (*string)(<nil>)
              }),
              VariableID: (*string)(<nil>),
              FunctionCall: (*variable.FunctionCall)(<nil>),
              NegativeExpression: (*variable.Expression)(<nil>),
              NotExpression: (*variable.Expression)(<nil>),
              LeftOperand: (*variable.Expression)(<nil>),
              RightOperand: (*variable.Expression)(<nil>),
              Operator: (*int)(<nil>)
            })
          }),
          ReturnStatement: (*tree.ReturnStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          LineGroupStatement: (*tree.LineGroupStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)(<nil>),
          CallStatement: (*tree.CallStatement)(<nil>),
          DeclareStatement: (*tree.DeclareStatement)({
            VariableID: (string) (len=11) "pies_bought",
            Value: (*variable.Expression)({
              Value: (*variable.Value)({
                Number: (*float64)(0),
                Boolean: (*bool)(<nil>),
                String: (*string)(<nil>)
              }),
              VariableID: (*string)(<nil>),
              FunctionCall: (*variable.FunctionCall)(<nil>),
              NegativeExpression: (*variable.Expression)(<nil>),
              NotExpression: (*variable.Expression)(<nil>),
              LeftOperand: (*variable.Expression)(<nil>),
              RightOperand: (*variable.Expression)(<nil>),
              Operator: (*int)(<nil>)
            })
          }),
          ReturnStatement: (*tree.ReturnStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          LineGroupStatement: (*tree.LineGroupStatement)({
            Items: ([]*tree.LineGroupItem) (len=7) {
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=21) "Baker: Want another? ",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)({
                    Value: (*variable.Value)(<nil>),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*variable.FunctionCall)(<nil>),
                    NegativeExpression: (*variable.Expression)(<nil>),
                    NotExpression: (*variable.Expression)(<nil>),
                    LeftOperand: (*variable.Expression)({
                      Value: (*variable.Value)(<nil>),
                      VariableID: (*string)((len=11) "pies_bought"),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    RightOperand: (*variable.Expression)({
                      Value: (*variable.Value)({
                        Number: (*float64)(0),
                        Boolean: (*bool)(<nil>),
                        String: (*string)(<nil>)
                      }),
                      VariableID: (*string)(<nil>),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    Operator: (*int)(8)
                  }),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=30) "Baker: How about another pie? ",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)({
                    Value: (*variable.Value)(<nil>),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*variable.FunctionCall)(<nil>),
                    NegativeExpression: (*variable.Expression)(<nil>),
                    NotExpression: (*variable.Expression)(<nil>),
                    LeftOperand: (*variable.Expression)({
                      Value: (*variable.Value)(<nil>),
                      VariableID: (*string)((len=11) "pies_bought"),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    RightOperand: (*variable.Expression)({
                      Value: (*variable.Value)({
                        Number: (*float64)(0),
                        Boolean: (*bool)(<nil>),
                        String: (*string)(<nil>)
                      }),
                      VariableID: (*string)(<nil>),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    Operator: (*int)(8)
                  }),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=20) "Baker: Another pie? ",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)({
                    Value: (*variable.Value)(<nil>),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*variable.FunctionCall)(<nil>),
                    NegativeExpression: (*variable.Expression)(<nil>),
                    NotExpression: (*variable.Expression)(<nil>),
                    LeftOperand: (*variable.Expression)({
                      Value: (*variable.Value)(<nil>),
                      VariableID: (*string)((len=11) "pies_bought"),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    RightOperand: (*variable.Expression)({
                      Value: (*variable.Value)({
                        Number: (*float64)(0),
                        Boolean: (*bool)(<nil>),
                        String: (*string)(<nil>)
                      }),
                      VariableID: (*string)(<nil>),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    Operator: (*int)(8)
                  }),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=41) "Baker: Another pie for my best customer? ",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)({
                    Value: (*variable.Value)(<nil>),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*variable.FunctionCall)(<nil>),
                    NegativeExpression: (*variable.Expression)(<nil>),
                    NotExpression: (*variable.Expression)(<nil>),
                    LeftOperand: (*variable.Expression)({
                      Value: (*variable.Value)(<nil>),
                      VariableID: (*string)((len=12) "knows_player"),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    RightOperand: (*variable.Expression)({
                      Value: (*variable.Value)(<nil>),
                      VariableID: (*string)(<nil>),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)({
                        Value: (*variable.Value)(<nil>),
                        VariableID: (*string)((len=11) "pies_bought"),
                        FunctionCall: (*variable.FunctionCall)(<nil>),
                        NegativeExpression: (*variable.Expression)(<nil>),
                        NotExpression: (*variable.Expression)(<nil>),
                        LeftOperand: (*variable.Expression)(<nil>),
                        RightOperand: (*variable.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      }),
                      RightOperand: (*variable.Expression)({
                        Value: (*variable.Value)({
                          Number: (*float64)(0),
                          Boolean: (*bool)(<nil>),
                          String: (*string)(<nil>)
                        }),
                        VariableID: (*string)(<nil>),
                        FunctionCall: (*variable.FunctionCall)(<nil>),
                        NegativeExpression: (*variable.Expression)(<nil>),
                        NotExpression: (*variable.Expression)(<nil>),
                        LeftOperand: (*variable.Expression)(<nil>),
                        RightOperand: (*variable.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      }),
                      Operator: (*int)(8)
                    }),
                    Operator: (*int)(11)
                  }),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=21) "Baker: What d'ya say?",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)(<nil>),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=20) "Baker: How about it?",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)(<nil>),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=16) "Baker: Want one?",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)(<nil>),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              })
            }
          }),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)(<nil>),
          CallStatement: (*tree.CallStatement)(<nil>),
          DeclareStatement: (*tree.DeclareStatement)(<nil>),
          ReturnStatement: (*tree.ReturnStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)({
            Options: ([]*tree.ShortcutOption) (len=2) {
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=7) "Buy Pie",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)(<nil>),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) (len=2) {
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    LineGroupStatement: (*tree.LineGroupStatement)({
                      Items: ([]*tree.LineGroupItem) (len=3) {
                        (*tree.LineGroupItem)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=24) "Baker: Thank you kindly!",
                                  Expression: (*variable.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*variable.Expression)(<nil>),
                            Tags: ([]string) <nil>
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        }),
                        (*tree.LineGroupItem)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=40) "Baker: Pleasure doin' business with you!",
                                  Expression: (*variable.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*variable.Expression)(<nil>),
                            Tags: ([]string) <nil>
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        }),
                        (*tree.LineGroupItem)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=13) "Baker: Enjoy!",
                                  Expression: (*variable.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*variable.Expression)(<nil>),
                            Tags: ([]string) <nil>
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        })
                      }
                    }),
                    SetStatement: (*tree.SetStatement)(<nil>),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>),
                    CommandStatement: (*tree.CommandStatement)(<nil>),
                    CallStatement: (*tree.CallStatement)(<nil>),
                    DeclareStatement: (*tree.DeclareStatement)(<nil>),
                    ReturnStatement: (*tree.ReturnStatement)(<nil>)
                  }),
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    LineGroupStatement: (*tree.LineGroupStatement)(<nil>),
                    SetStatement: (*tree.SetStatement)({
                      VariableID: (string) (len=11) "pies_bought",
                      InPlaceOperator: (int) 18,
                      Expression: (*variable.Expression)({
                        Value: (*variable.Value)({
                          Number: (*float64)(1),
                          Boolean: (*bool)(<nil>),
                          String: (*string)(<nil>)
                        }),
                        VariableID: (*string)(<nil>),
                        FunctionCall: (*variable.FunctionCall)(<nil>),
                        NegativeExpression: (*variable.Expression)(<nil>),
                        NotExpression: (*variable.Expression)(<nil>),
                        LeftOperand: (*variable.Expression)(<nil>),
                        RightOperand: (*variable.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      })
                    }),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>),
                    CommandStatement: (*tree.CommandStatement)(<nil>),
                    CallStatement: (*tree.CallStatement)(<nil>),
                    DeclareStatement: (*tree.DeclareStatement)(<nil>),
                    ReturnStatement: (*tree.ReturnStatement)(<nil>)
                  })
                }
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=13) "Don't Buy Pie",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)(<nil>),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) (len=1) {
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    LineGroupStatement: (*tree.LineGroupStatement)({
                      Items: ([]*tree.LineGroupItem) (len=3) {
                        (*tree.LineGroupItem)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=26) "Baker: Aw, that's a shame!",
                                  Expression: (*variable.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*variable.Expression)(<nil>),
                            Tags: ([]string) <nil>
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        }),
                        (*tree.LineGroupItem)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=27) "Baker: Dang, no sale today!",
                                  Expression: (*variable.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*variable.Expression)(<nil>),
                            Tags: ([]string) <nil>
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        }),
                        (*tree.LineGroupItem)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=36) "Baker: Come back another time, then!",
                                  Expression: (*variable.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*variable.Expression)(<nil>),
                            Tags: ([]string) <nil>
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        })
                      }
                    }),
                    SetStatement: (*tree.SetStatement)(<nil>),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>),
                    CommandStatement: (*tree.CommandStatement)(<nil>),
                    CallStatement: (*tree.CallStatement)(<nil>),
                    DeclareStatement: (*tree.DeclareStatement)(<nil>),
                    ReturnStatement: (*tree.ReturnStatement)(<nil>)
                  })
                }
              })
            }
          }),
          LineGroupStatement: (*tree.LineGroupStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)(<nil>),
          CallStatement: (*tree.CallStatement)(<nil>),
          DeclareStatement: (*tree.DeclareStatement)(<nil>),
          ReturnStatement: (*tree.ReturnStatement)(<nil>)
        })
      }
    },
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=15) "BakerSeesPlayer"
      },
      Statements: ([]*tree.Statement) (len=1) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          LineGroupStatement: (*tree.LineGroupStatement)({
            Items: ([]*tree.LineGroupItem) (len=4) {
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=17) "Baker: Hey there!",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)(<nil>),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=18) "Baker: Fresh pies!",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)(<nil>),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=26) "Baker: Fresh and hot pies!",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)(<nil>),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.LineGroupItem)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=21) "Baker: Popular pies! ",
                        Expression: (*variable.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*variable.Expression)({
                    Value: (*variable.Value)(<nil>),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*variable.FunctionCall)(<nil>),
                    NegativeExpression: (*variable.Expression)(<nil>),
                    NotExpression: (*variable.Expression)(<nil>),
                    LeftOperand: (*variable.Expression)({
                      Value: (*variable.Value)(<nil>),
                      VariableID: (*string)((len=11) "pies_bought"),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    RightOperand: (*variable.Expression)({
                      Value: (*variable.Value)({
                        Number: (*float64)(2),
                        Boolean: (*bool)(<nil>),
                        String: (*string)(<nil>)
                      }),
                      VariableID: (*string)(<nil>),
                      FunctionCall: (*variable.FunctionCall)(<nil>),
                      NegativeExpression: (*variable.Expression)(<nil>),
                      NotExpression: (*variable.Expression)(<nil>),
                      LeftOperand: (*variable.Expression)(<nil>),
                      RightOperand: (*variable.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    Operator: (*int)(8)
                  }),
                  Tags: ([]string) <nil>
                }),
                Statements: ([]*tree.Statement) <nil>
              })
            }
          }),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)(<nil>),
          CallStatement: (*tree.CallStatement)(<nil>),
          DeclareStatement: (*tree.DeclareStatement)(<nil>),
          ReturnStatement: (*tree.ReturnStatement)(<nil>)
        })
      }
    }
  }
})
