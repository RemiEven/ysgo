(*tree.Dialogue)({
  Nodes: ([]tree.Node) (len=1) {
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=4) "Tags"
      },
      Statements: ([]*tree.Statement) (len=3) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=28) "Which flavor do you prefer? ",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>),
            Tags: ([]string) (len=1) {
              (string) (len=5) "start"
            }
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)(<nil>),
          CallStatement: (*tree.CallStatement)(<nil>),
          DeclareStatement: (*tree.DeclareStatement)(<nil>),
          ReturnStatement: (*tree.ReturnStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)({
            Options: ([]*tree.ShortcutOption) (len=2) {
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=10) "Chocolate ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)(<nil>),
                  Tags: ([]string) (len=1) {
                    (string) (len=9) "chocolate"
                  }
                }),
                Statements: ([]*tree.Statement) (len=1) {
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    SetStatement: (*tree.SetStatement)({
                      VariableID: (string) (len=6) "flavor",
                      InPlaceOperator: (int) 14,
                      Expression: (*tree.Expression)({
                        Value: (*variable.Value)({
                          Number: (*float64)(<nil>),
                          Boolean: (*bool)(<nil>),
                          String: (*string)((len=9) "chocolate")
                        }),
                        VariableID: (*string)(<nil>),
                        FunctionCall: (*tree.FunctionCall)(<nil>),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      })
                    }),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>),
                    CommandStatement: (*tree.CommandStatement)(<nil>),
                    CallStatement: (*tree.CallStatement)(<nil>),
                    DeclareStatement: (*tree.DeclareStatement)(<nil>),
                    ReturnStatement: (*tree.ReturnStatement)(<nil>)
                  })
                }
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=10) "Raspberry ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*variable.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(false),
                      String: (*string)(<nil>)
                    }),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*tree.FunctionCall)(<nil>),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  }),
                  Tags: ([]string) (len=2) {
                    (string) (len=14) "tone:sarcastic",
                    (string) (len=9) "duplicate"
                  }
                }),
                Statements: ([]*tree.Statement) (len=1) {
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    SetStatement: (*tree.SetStatement)({
                      VariableID: (string) (len=6) "flavor",
                      InPlaceOperator: (int) 14,
                      Expression: (*tree.Expression)({
                        Value: (*variable.Value)({
                          Number: (*float64)(<nil>),
                          Boolean: (*bool)(<nil>),
                          String: (*string)((len=9) "raspberry")
                        }),
                        VariableID: (*string)(<nil>),
                        FunctionCall: (*tree.FunctionCall)(<nil>),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      })
                    }),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>),
                    CommandStatement: (*tree.CommandStatement)(<nil>),
                    CallStatement: (*tree.CallStatement)(<nil>),
                    DeclareStatement: (*tree.DeclareStatement)(<nil>),
                    ReturnStatement: (*tree.ReturnStatement)(<nil>)
                  })
                }
              })
            }
          }),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)(<nil>),
          CallStatement: (*tree.CallStatement)(<nil>),
          DeclareStatement: (*tree.DeclareStatement)(<nil>),
          ReturnStatement: (*tree.ReturnStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=3) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=21) "Nice! Here, get some ",
                  Expression: (*tree.Expression)(<nil>)
                }),
                (*tree.LineFormattedTextElement)({
                  Text: (string) "",
                  Expression: (*tree.Expression)({
                    Value: (*variable.Value)(<nil>),
                    VariableID: (*string)((len=6) "flavor"),
                    FunctionCall: (*tree.FunctionCall)(<nil>),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=11) " icecream! ",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>),
            Tags: ([]string) (len=2) {
              (string) (len=3) "end",
              (string) (len=10) "goodending"
            }
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)(<nil>),
          CallStatement: (*tree.CallStatement)(<nil>),
          DeclareStatement: (*tree.DeclareStatement)(<nil>),
          ReturnStatement: (*tree.ReturnStatement)(<nil>)
        })
      }
    }
  }
})
