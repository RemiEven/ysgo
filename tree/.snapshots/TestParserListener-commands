(*tree.Dialogue)({
  Nodes: ([]tree.Node) (len=1) {
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=8) "commands"
      },
      Statements: ([]*tree.Statement) (len=4) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)({
            Elements: ([]*tree.CommandStatementElement) (len=2) {
              (*tree.CommandStatementElement)({
                text: (string) "",
                Expression: (*tree.Expression)({
                  Value: (*tree.Value)({
                    Number: (*float64)(<nil>),
                    Boolean: (*bool)(<nil>),
                    String: (*string)((len=4) "wait"),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*tree.FunctionCall)(<nil>)
                  }),
                  NegativeExpression: (*tree.Expression)(<nil>),
                  NotExpression: (*tree.Expression)(<nil>),
                  LeftOperand: (*tree.Expression)(<nil>),
                  RightOperand: (*tree.Expression)(<nil>),
                  Operator: (*int)(<nil>)
                })
              }),
              (*tree.CommandStatementElement)({
                text: (string) "",
                Expression: (*tree.Expression)({
                  Value: (*tree.Value)({
                    Number: (*float64)(2),
                    Boolean: (*bool)(<nil>),
                    String: (*string)(<nil>),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*tree.FunctionCall)(<nil>)
                  }),
                  NegativeExpression: (*tree.Expression)(<nil>),
                  NotExpression: (*tree.Expression)(<nil>),
                  LeftOperand: (*tree.Expression)(<nil>),
                  RightOperand: (*tree.Expression)(<nil>),
                  Operator: (*int)(<nil>)
                })
              })
            }
          })
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)({
            Elements: ([]*tree.CommandStatementElement) (len=3) {
              (*tree.CommandStatementElement)({
                text: (string) "",
                Expression: (*tree.Expression)({
                  Value: (*tree.Value)({
                    Number: (*float64)(<nil>),
                    Boolean: (*bool)(<nil>),
                    String: (*string)((len=9) "setsprite"),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*tree.FunctionCall)(<nil>)
                  }),
                  NegativeExpression: (*tree.Expression)(<nil>),
                  NotExpression: (*tree.Expression)(<nil>),
                  LeftOperand: (*tree.Expression)(<nil>),
                  RightOperand: (*tree.Expression)(<nil>),
                  Operator: (*int)(<nil>)
                })
              }),
              (*tree.CommandStatementElement)({
                text: (string) "",
                Expression: (*tree.Expression)({
                  Value: (*tree.Value)({
                    Number: (*float64)(<nil>),
                    Boolean: (*bool)(<nil>),
                    String: (*string)((len=8) "ShipName"),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*tree.FunctionCall)(<nil>)
                  }),
                  NegativeExpression: (*tree.Expression)(<nil>),
                  NotExpression: (*tree.Expression)(<nil>),
                  LeftOperand: (*tree.Expression)(<nil>),
                  RightOperand: (*tree.Expression)(<nil>),
                  Operator: (*int)(<nil>)
                })
              }),
              (*tree.CommandStatementElement)({
                text: (string) "",
                Expression: (*tree.Expression)({
                  Value: (*tree.Value)({
                    Number: (*float64)(<nil>),
                    Boolean: (*bool)(<nil>),
                    String: (*string)((len=5) "happy"),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*tree.FunctionCall)(<nil>)
                  }),
                  NegativeExpression: (*tree.Expression)(<nil>),
                  NotExpression: (*tree.Expression)(<nil>),
                  LeftOperand: (*tree.Expression)(<nil>),
                  RightOperand: (*tree.Expression)(<nil>),
                  Operator: (*int)(<nil>)
                })
              })
            }
          })
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)({
            Elements: ([]*tree.CommandStatementElement) (len=1) {
              (*tree.CommandStatementElement)({
                text: (string) "",
                Expression: (*tree.Expression)({
                  Value: (*tree.Value)({
                    Number: (*float64)(<nil>),
                    Boolean: (*bool)(<nil>),
                    String: (*string)((len=8) "fade_out"),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*tree.FunctionCall)(<nil>)
                  }),
                  NegativeExpression: (*tree.Expression)(<nil>),
                  NotExpression: (*tree.Expression)(<nil>),
                  LeftOperand: (*tree.Expression)(<nil>),
                  RightOperand: (*tree.Expression)(<nil>),
                  Operator: (*int)(<nil>)
                })
              })
            }
          })
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>),
          CommandStatement: (*tree.CommandStatement)({
            Elements: ([]*tree.CommandStatementElement) (len=2) {
              (*tree.CommandStatementElement)({
                text: (string) "",
                Expression: (*tree.Expression)({
                  Value: (*tree.Value)({
                    Number: (*float64)(<nil>),
                    Boolean: (*bool)(<nil>),
                    String: (*string)((len=9) "setsprite"),
                    VariableID: (*string)(<nil>),
                    FunctionCall: (*tree.FunctionCall)(<nil>)
                  }),
                  NegativeExpression: (*tree.Expression)(<nil>),
                  NotExpression: (*tree.Expression)(<nil>),
                  LeftOperand: (*tree.Expression)(<nil>),
                  RightOperand: (*tree.Expression)(<nil>),
                  Operator: (*int)(<nil>)
                })
              }),
              (*tree.CommandStatementElement)({
                text: (string) "",
                Expression: (*tree.Expression)({
                  Value: (*tree.Value)({
                    Number: (*float64)(<nil>),
                    Boolean: (*bool)(<nil>),
                    String: (*string)(<nil>),
                    VariableID: (*string)((len=6) "sprite"),
                    FunctionCall: (*tree.FunctionCall)(<nil>)
                  }),
                  NegativeExpression: (*tree.Expression)(<nil>),
                  NotExpression: (*tree.Expression)(<nil>),
                  LeftOperand: (*tree.Expression)(<nil>),
                  RightOperand: (*tree.Expression)(<nil>),
                  Operator: (*int)(<nil>)
                })
              })
            }
          })
        })
      }
    }
  }
})
