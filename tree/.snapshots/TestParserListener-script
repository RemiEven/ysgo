(*tree.Dialogue)({
  Nodes: ([]tree.Node) (len=1) {
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=27) "Coucou me revoiloûûûûû"
      },
      Statements: ([]*tree.Statement) (len=2) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=4) "Wow!",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=3) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=6) "Hello ",
                  Expression: (*tree.Expression)(<nil>)
                }),
                (*tree.LineFormattedTextElement)({
                  Text: (string) "",
                  Expression: (*tree.Expression)({
                    Value: (*tree.Value)(<nil>),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)({
                      Value: (*tree.Value)({
                        Number: (*float64)(1),
                        Boolean: (*bool)(<nil>),
                        String: (*string)(<nil>),
                        VariableID: (*string)(<nil>)
                      }),
                      NegativeExpression: (*tree.Expression)(<nil>),
                      NotExpression: (*tree.Expression)(<nil>),
                      LeftOperand: (*tree.Expression)(<nil>),
                      RightOperand: (*tree.Expression)(<nil>),
                      Operator: (int) 0
                    }),
                    RightOperand: (*tree.Expression)({
                      Value: (*tree.Value)(<nil>),
                      NegativeExpression: (*tree.Expression)(<nil>),
                      NotExpression: (*tree.Expression)(<nil>),
                      LeftOperand: (*tree.Expression)({
                        Value: (*tree.Value)({
                          Number: (*float64)(2),
                          Boolean: (*bool)(<nil>),
                          String: (*string)(<nil>),
                          VariableID: (*string)(<nil>)
                        }),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (int) 0
                      }),
                      RightOperand: (*tree.Expression)({
                        Value: (*tree.Value)({
                          Number: (*float64)(3),
                          Boolean: (*bool)(<nil>),
                          String: (*string)(<nil>),
                          VariableID: (*string)(<nil>)
                        }),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (int) 0
                      }),
                      Operator: (int) 3
                    }),
                    Operator: (int) 0
                  })
                }),
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=1) "!",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>)
        })
      }
    }
  }
})
