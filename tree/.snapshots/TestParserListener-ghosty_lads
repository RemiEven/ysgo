(*tree.Dialogue)({
  Nodes: ([]tree.Node) (len=6) {
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=5) "Start"
      },
      Statements: ([]*tree.Statement) (len=5) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)({
            VariableID: (string) (len=8) "hasClueA",
            InPlaceOperator: (int) 14,
            Expression: (*tree.Expression)({
              Value: (*tree.Value)({
                Number: (*float64)(<nil>),
                Boolean: (*bool)(false),
                String: (*string)(<nil>),
                VariableID: (*string)(<nil>),
                FunctionCall: (*tree.FunctionCall)(<nil>)
              }),
              NegativeExpression: (*tree.Expression)(<nil>),
              NotExpression: (*tree.Expression)(<nil>),
              LeftOperand: (*tree.Expression)(<nil>),
              RightOperand: (*tree.Expression)(<nil>),
              Operator: (*int)(<nil>)
            })
          }),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)({
            VariableID: (string) (len=8) "hasClueB",
            InPlaceOperator: (int) 14,
            Expression: (*tree.Expression)({
              Value: (*tree.Value)({
                Number: (*float64)(<nil>),
                Boolean: (*bool)(false),
                String: (*string)(<nil>),
                VariableID: (*string)(<nil>),
                FunctionCall: (*tree.FunctionCall)(<nil>)
              }),
              NegativeExpression: (*tree.Expression)(<nil>),
              NotExpression: (*tree.Expression)(<nil>),
              LeftOperand: (*tree.Expression)(<nil>),
              RightOperand: (*tree.Expression)(<nil>),
              Operator: (*int)(<nil>)
            })
          }),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)({
            VariableID: (string) (len=8) "hasClueC",
            InPlaceOperator: (int) 14,
            Expression: (*tree.Expression)({
              Value: (*tree.Value)({
                Number: (*float64)(<nil>),
                Boolean: (*bool)(false),
                String: (*string)(<nil>),
                VariableID: (*string)(<nil>),
                FunctionCall: (*tree.FunctionCall)(<nil>)
              }),
              NegativeExpression: (*tree.Expression)(<nil>),
              NotExpression: (*tree.Expression)(<nil>),
              LeftOperand: (*tree.Expression)(<nil>),
              RightOperand: (*tree.Expression)(<nil>),
              Operator: (*int)(<nil>)
            })
          }),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=94) "Ghost: Welcome to the graveyard! Unfortunately, you're just in time for an unsolved mystery...",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=71) "Ghost: You'll have to speak to these three to figure out what happened!",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        })
      }
    },
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=15) "LeftGraveLouise"
      },
      Statements: ([]*tree.Statement) (len=4) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=33) "Louise: What do you want to know?",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)({
            Options: ([]*tree.ShortcutOption) (len=5) {
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=36) "Something that will get me no clues?",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)(<nil>)
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=35) "Something that will get me Clue A? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)(<nil>),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)({
                      Value: (*tree.Value)({
                        Number: (*float64)(<nil>),
                        Boolean: (*bool)(<nil>),
                        String: (*string)(<nil>),
                        VariableID: (*string)((len=8) "hasClueA"),
                        FunctionCall: (*tree.FunctionCall)(<nil>)
                      }),
                      NegativeExpression: (*tree.Expression)(<nil>),
                      NotExpression: (*tree.Expression)(<nil>),
                      LeftOperand: (*tree.Expression)(<nil>),
                      RightOperand: (*tree.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) (len=1) {
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    SetStatement: (*tree.SetStatement)({
                      VariableID: (string) (len=8) "hasClueA",
                      InPlaceOperator: (int) 14,
                      Expression: (*tree.Expression)({
                        Value: (*tree.Value)({
                          Number: (*float64)(<nil>),
                          Boolean: (*bool)(true),
                          String: (*string)(<nil>),
                          VariableID: (*string)(<nil>),
                          FunctionCall: (*tree.FunctionCall)(<nil>)
                        }),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      })
                    }),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>)
                  })
                }
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue A? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueA"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue B? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueB"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue C? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueC"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              })
            }
          }),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=29) "Louise: ~additional dialogue~",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=16) "Louise: Ok, bye!",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        })
      }
    },
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=16) "CenterGraveCarol"
      },
      Statements: ([]*tree.Statement) (len=4) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=32) "Carol: What do you want to know?",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)({
            Options: ([]*tree.ShortcutOption) (len=5) {
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=36) "Something that will get me no clues?",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)(<nil>)
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=35) "Something that will get me Clue B? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)(<nil>),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)({
                      Value: (*tree.Value)({
                        Number: (*float64)(<nil>),
                        Boolean: (*bool)(<nil>),
                        String: (*string)(<nil>),
                        VariableID: (*string)((len=8) "hasClueA"),
                        FunctionCall: (*tree.FunctionCall)(<nil>)
                      }),
                      NegativeExpression: (*tree.Expression)(<nil>),
                      NotExpression: (*tree.Expression)(<nil>),
                      LeftOperand: (*tree.Expression)(<nil>),
                      RightOperand: (*tree.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    RightOperand: (*tree.Expression)({
                      Value: (*tree.Value)(<nil>),
                      NegativeExpression: (*tree.Expression)(<nil>),
                      NotExpression: (*tree.Expression)({
                        Value: (*tree.Value)({
                          Number: (*float64)(<nil>),
                          Boolean: (*bool)(<nil>),
                          String: (*string)(<nil>),
                          VariableID: (*string)((len=8) "hasClueB"),
                          FunctionCall: (*tree.FunctionCall)(<nil>)
                        }),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      }),
                      LeftOperand: (*tree.Expression)(<nil>),
                      RightOperand: (*tree.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    Operator: (*int)(11)
                  })
                }),
                Statements: ([]*tree.Statement) (len=1) {
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    SetStatement: (*tree.SetStatement)({
                      VariableID: (string) (len=8) "hasClueB",
                      InPlaceOperator: (int) 14,
                      Expression: (*tree.Expression)({
                        Value: (*tree.Value)({
                          Number: (*float64)(<nil>),
                          Boolean: (*bool)(true),
                          String: (*string)(<nil>),
                          VariableID: (*string)(<nil>),
                          FunctionCall: (*tree.FunctionCall)(<nil>)
                        }),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      })
                    }),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>)
                  })
                }
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue A? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueA"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue B? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueB"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue C? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueC"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              })
            }
          }),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=28) "Carol: ~additional dialogue~",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=15) "Carol: Ok, bye!",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        })
      }
    },
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=14) "RightGraveRuby"
      },
      Statements: ([]*tree.Statement) (len=4) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=31) "Ruby: What do you want to know?",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)({
            Options: ([]*tree.ShortcutOption) (len=5) {
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=36) "Something that will get me no clues?",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)(<nil>)
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=35) "Something that will get me Clue C? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)(<nil>),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)({
                      Value: (*tree.Value)({
                        Number: (*float64)(<nil>),
                        Boolean: (*bool)(<nil>),
                        String: (*string)(<nil>),
                        VariableID: (*string)((len=8) "hasClueB"),
                        FunctionCall: (*tree.FunctionCall)(<nil>)
                      }),
                      NegativeExpression: (*tree.Expression)(<nil>),
                      NotExpression: (*tree.Expression)(<nil>),
                      LeftOperand: (*tree.Expression)(<nil>),
                      RightOperand: (*tree.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    RightOperand: (*tree.Expression)({
                      Value: (*tree.Value)(<nil>),
                      NegativeExpression: (*tree.Expression)(<nil>),
                      NotExpression: (*tree.Expression)({
                        Value: (*tree.Value)({
                          Number: (*float64)(<nil>),
                          Boolean: (*bool)(<nil>),
                          String: (*string)(<nil>),
                          VariableID: (*string)((len=8) "hasClueC"),
                          FunctionCall: (*tree.FunctionCall)(<nil>)
                        }),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      }),
                      LeftOperand: (*tree.Expression)(<nil>),
                      RightOperand: (*tree.Expression)(<nil>),
                      Operator: (*int)(<nil>)
                    }),
                    Operator: (*int)(11)
                  })
                }),
                Statements: ([]*tree.Statement) (len=1) {
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    SetStatement: (*tree.SetStatement)({
                      VariableID: (string) (len=8) "hasClueC",
                      InPlaceOperator: (int) 14,
                      Expression: (*tree.Expression)({
                        Value: (*tree.Value)({
                          Number: (*float64)(<nil>),
                          Boolean: (*bool)(true),
                          String: (*string)(<nil>),
                          VariableID: (*string)(<nil>),
                          FunctionCall: (*tree.FunctionCall)(<nil>)
                        }),
                        NegativeExpression: (*tree.Expression)(<nil>),
                        NotExpression: (*tree.Expression)(<nil>),
                        LeftOperand: (*tree.Expression)(<nil>),
                        RightOperand: (*tree.Expression)(<nil>),
                        Operator: (*int)(<nil>)
                      })
                    }),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>)
                  })
                }
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue A? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueA"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue B? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueB"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=39) "Something relating to existing Clue C? ",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)({
                    Value: (*tree.Value)({
                      Number: (*float64)(<nil>),
                      Boolean: (*bool)(<nil>),
                      String: (*string)(<nil>),
                      VariableID: (*string)((len=8) "hasClueC"),
                      FunctionCall: (*tree.FunctionCall)(<nil>)
                    }),
                    NegativeExpression: (*tree.Expression)(<nil>),
                    NotExpression: (*tree.Expression)(<nil>),
                    LeftOperand: (*tree.Expression)(<nil>),
                    RightOperand: (*tree.Expression)(<nil>),
                    Operator: (*int)(<nil>)
                  })
                }),
                Statements: ([]*tree.Statement) <nil>
              })
            }
          }),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=27) "Ruby: ~additional dialogue~",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=14) "Ruby: Ok, bye!",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        })
      }
    },
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=5) "Ghost"
      },
      Statements: ([]*tree.Statement) (len=3) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=46) "Ghost: Are you ready to tell me what happened?",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)(<nil>),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)({
            Options: ([]*tree.ShortcutOption) (len=2) {
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=3) "Yes",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)(<nil>)
                }),
                Statements: ([]*tree.Statement) (len=3) {
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)({
                      Text: (*tree.LineFormattedText)({
                        Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                          (*tree.LineFormattedTextElement)({
                            Text: (string) (len=30) "Ghost: Well, what do you know?",
                            Expression: (*tree.Expression)(<nil>)
                          })
                        }
                      }),
                      Condition: (*tree.Expression)(<nil>)
                    }),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    SetStatement: (*tree.SetStatement)(<nil>),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>)
                  }),
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)(<nil>),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)({
                      Options: ([]*tree.ShortcutOption) (len=4) {
                        (*tree.ShortcutOption)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=16) "I have no clues.",
                                  Expression: (*tree.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*tree.Expression)(<nil>)
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        }),
                        (*tree.ShortcutOption)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=15) "I have clue A. ",
                                  Expression: (*tree.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*tree.Expression)({
                              Value: (*tree.Value)({
                                Number: (*float64)(<nil>),
                                Boolean: (*bool)(<nil>),
                                String: (*string)(<nil>),
                                VariableID: (*string)((len=8) "hasClueA"),
                                FunctionCall: (*tree.FunctionCall)(<nil>)
                              }),
                              NegativeExpression: (*tree.Expression)(<nil>),
                              NotExpression: (*tree.Expression)(<nil>),
                              LeftOperand: (*tree.Expression)(<nil>),
                              RightOperand: (*tree.Expression)(<nil>),
                              Operator: (*int)(<nil>)
                            })
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        }),
                        (*tree.ShortcutOption)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=22) "I have clues A and B. ",
                                  Expression: (*tree.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*tree.Expression)({
                              Value: (*tree.Value)({
                                Number: (*float64)(<nil>),
                                Boolean: (*bool)(<nil>),
                                String: (*string)(<nil>),
                                VariableID: (*string)((len=8) "hasClueB"),
                                FunctionCall: (*tree.FunctionCall)(<nil>)
                              }),
                              NegativeExpression: (*tree.Expression)(<nil>),
                              NotExpression: (*tree.Expression)(<nil>),
                              LeftOperand: (*tree.Expression)(<nil>),
                              RightOperand: (*tree.Expression)(<nil>),
                              Operator: (*int)(<nil>)
                            })
                          }),
                          Statements: ([]*tree.Statement) <nil>
                        }),
                        (*tree.ShortcutOption)({
                          LineStatement: (*tree.LineStatement)({
                            Text: (*tree.LineFormattedText)({
                              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                                (*tree.LineFormattedTextElement)({
                                  Text: (string) (len=25) "I have clues A, B and C. ",
                                  Expression: (*tree.Expression)(<nil>)
                                })
                              }
                            }),
                            Condition: (*tree.Expression)({
                              Value: (*tree.Value)({
                                Number: (*float64)(<nil>),
                                Boolean: (*bool)(<nil>),
                                String: (*string)(<nil>),
                                VariableID: (*string)((len=8) "hasClueC"),
                                FunctionCall: (*tree.FunctionCall)(<nil>)
                              }),
                              NegativeExpression: (*tree.Expression)(<nil>),
                              NotExpression: (*tree.Expression)(<nil>),
                              LeftOperand: (*tree.Expression)(<nil>),
                              RightOperand: (*tree.Expression)(<nil>),
                              Operator: (*int)(<nil>)
                            })
                          }),
                          Statements: ([]*tree.Statement) (len=1) {
                            (*tree.Statement)({
                              LineStatement: (*tree.LineStatement)(<nil>),
                              ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                              SetStatement: (*tree.SetStatement)(<nil>),
                              JumpStatement: (*tree.JumpStatement)({
                                Expression: (*tree.Expression)({
                                  Value: (*tree.Value)({
                                    Number: (*float64)(<nil>),
                                    Boolean: (*bool)(<nil>),
                                    String: (*string)((len=6) "Ending"),
                                    VariableID: (*string)(<nil>),
                                    FunctionCall: (*tree.FunctionCall)(<nil>)
                                  }),
                                  NegativeExpression: (*tree.Expression)(<nil>),
                                  NotExpression: (*tree.Expression)(<nil>),
                                  LeftOperand: (*tree.Expression)(<nil>),
                                  RightOperand: (*tree.Expression)(<nil>),
                                  Operator: (*int)(<nil>)
                                })
                              }),
                              IfStatement: (*tree.IfStatement)(<nil>)
                            })
                          }
                        })
                      }
                    }),
                    SetStatement: (*tree.SetStatement)(<nil>),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>)
                  }),
                  (*tree.Statement)({
                    LineStatement: (*tree.LineStatement)({
                      Text: (*tree.LineFormattedText)({
                        Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                          (*tree.LineFormattedTextElement)({
                            Text: (string) (len=34) "Ghost: That doesn't sound right...",
                            Expression: (*tree.Expression)(<nil>)
                          })
                        }
                      }),
                      Condition: (*tree.Expression)(<nil>)
                    }),
                    ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
                    SetStatement: (*tree.SetStatement)(<nil>),
                    JumpStatement: (*tree.JumpStatement)(<nil>),
                    IfStatement: (*tree.IfStatement)(<nil>)
                  })
                }
              }),
              (*tree.ShortcutOption)({
                LineStatement: (*tree.LineStatement)({
                  Text: (*tree.LineFormattedText)({
                    Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                      (*tree.LineFormattedTextElement)({
                        Text: (string) (len=2) "No",
                        Expression: (*tree.Expression)(<nil>)
                      })
                    }
                  }),
                  Condition: (*tree.Expression)(<nil>)
                }),
                Statements: ([]*tree.Statement) <nil>
              })
            }
          }),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        }),
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=38) "Ghost: Go on and speak to those three!",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        })
      }
    },
    (tree.Node) {
      Headers: (map[string]string) (len=1) {
        (string) (len=5) "title": (string) (len=6) "Ending"
      },
      Statements: ([]*tree.Statement) (len=1) {
        (*tree.Statement)({
          LineStatement: (*tree.LineStatement)({
            Text: (*tree.LineFormattedText)({
              Elements: ([]*tree.LineFormattedTextElement) (len=1) {
                (*tree.LineFormattedTextElement)({
                  Text: (string) (len=21) "Ghost: You solved it!",
                  Expression: (*tree.Expression)(<nil>)
                })
              }
            }),
            Condition: (*tree.Expression)(<nil>)
          }),
          ShortcutOptionStatement: (*tree.ShortcutOptionStatement)(<nil>),
          SetStatement: (*tree.SetStatement)(<nil>),
          JumpStatement: (*tree.JumpStatement)(<nil>),
          IfStatement: (*tree.IfStatement)(<nil>)
        })
      }
    }
  }
})
